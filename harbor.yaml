---
# Source: harbor/templates/core/core-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: kc-harbor-core
  labels:
    heritage: Helm
    release: kc-harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  secretKey: "bm90LWEtc2VjdXJlLWtleQ=="
  secret: "UXowUzlDTGtUZ25uUGdWcQ=="
  tls.key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBNmV5L2VPUVFYUHBZdkVCMFptUVllR0tPVm1DVkNkblRMTUNPRm5hQjJoelNKY25EClV0ZE1mUTJmY0FIdzZTNW96OHNDQTNpeTN4Uk9ZMUM2ampIM0RNZDdhR1NuSXZ6NkNKOVRoQWgvUTl3SGw3WGYKR0hCL2s0MmN4LzkyWmlNMEVjbThRTzRRNWtFbXVLY2FWTHlVakJGMW10MjBtZmRCaVVpdWhacG85MEtUZDBVWQpPVHpERG5Tdkw0SXdITjFCdUl4cUVqSmlpSThNQ3ZGM0JyQVRVY1NVWXFOSHJjVC9hY1Vnd0ZzZWo2dGlnd3FLCjFtaGZXcEMzc29YL3lJaFNBVmw5aHVPbmcrdk5TWk53cXcrSG4vYk4zaWNPemhOdGc3V0pjZWZzOHM2MjRJdmsKcUhMTmhoU0s1dks1emtWejlxM3RHSWpFckllSEhQRkkzMFZnb3dJREFRQUJBb0lCQUVaRFExdm5mUGJBaDRpNwovM3FGMUVmTXFwNU5VbGJzSTU4TWsyRXg1VjBEVFNmbWk1SEZjNGNZWVd4K1dNTmhtai9YNVZudmxpS2xjY29wCkJIQVRsL1l4c09LeFlQYUVjQUhKQVlmbUdYdmppakJLZzZGT29UTkwxT3pKMGVGcDc0anNSR3hvVlpFanZxSzIKSnBXUE16dERQMFR1RlFJdUgzUkI3WkhaeUcrRDc4cGh5R0xkNkRKQkFtSFNHOTFjM1h6cjFmMkFKNVR3T25JVgozZmVhOHptYzF2N3NpbGtUYUwvdmEzM1dMdUtLTCtwbnRDZTRQZ1BqYXR2ZlVyc2lPRlozNzBxcTdQVnhxY1dqCnpCUXZkUHR3TnVZVFQwdC91NzQ3c0VtQlZGTU5ZZkprUFBnejNDV1hkdUdIL1dEbW13Nk9rUHVkbDgrQ2RzaWYKT3QydHBMRUNnWUVBK0o5NVFpY29zZzlqb3ZzY1ptQXJPcnUyVE9qZ1VSZUQxOW5LdDVrWFNnQllzK2hPNUtkKwpBVStzbTlLS1huQ05qRzY2U040UlNKbXRnN0dSOEpacjJ1WDNDZWEvYlpqMWt4L0xQNXFwM3FNRXZ1ODhzN2d6CmtTYUFRcnd1MVhKcVNxWnRYVmd4S2RHTGplNVZMWU94Nnp5VVVuTkl5TU1yYWRJWmZ4ZmtvRmtDZ1lFQThOMmcKd1JYYjVkRjRFRXBYNXlrdmFLVEd5RW1jRTlpa2hwbDQxV01hWG1LUzdDVndyb2tZbEtRdHhzN2VRTXQrbkx1KwpHaWdrQ1E3RWpkWlk0TC9qOUFKbUZVZmNwd3lzM1RvT2Y5ajJyTHdkS2pvRC94clVOSkF4eFduUm53SEJUYUV1Ckdva1FUc0IzTVFEbXM0cVN3UjBmcUVXdTJEbVlsVUxBOVZpZlNWc0NnWUFwTC9vZG5IRWdkbTR5TE5sNm1FbngKRS9IU2NlM2ZZVDdsUGw1WDVoTzJuYklVTTlNR0REMVNxRWxYRXh6N0lqaEE0SU1aMlRnUngrdTMybTNyNW05OQp0d1VpN2NnZXR1MVA3ejl6alFMQk1FNXo5eHdlUmRDOUpoeXZjWTlzcXVTeTh6bEE4b0JLaGoxUlNQOXhaOVRNCnZKOXh2VWw4Z09DclNqUVJHdnMwR1FLQmdDV3ZwNDFPYkQrRERMUVB6YjBmVm9tYTduYzcvUzJsd2VoRmJ3Q0UKSndZSmlrOWtkRUw2dEZ2ZGJFUWs3ZVZaY1kvNFdBQWpzNit2SGRYTGFkQ1FkWXdpSy9LOGNhdTVjZnFUTU4yVQpCdFIwQW1RdSs1MFloNGRKNEYrdzlObGFIdktVZTNBdmJkdkVoV0duY0hFN0IwY3IxVjR3dVBDZjRsM0lPZ1NwClB4THRBb0dCQU1iVWRmYllKQmpuSjhmRFBDaFhreGVVWDJGM242cWJIbDFiRGhZaDh4NEVBNE1tejA3Q2t1MnkKV3hqZzk4eXNlSTlGRVJsbFdwWjliencvb0ErOThTMXJaZ3BtSk93VlRqU1JqNllwOVBmc1VGU1ZiZVJWSEx5Vwo5Q3hldGxPZkxFZzRCdmV1U21oKzdmdlZmUzNYOGVibGhUdWhWWkNMdWFRQVk3dlF4Y0xuCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg=="
  tls.crt: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURIekNDQWdlZ0F3SUJBZ0lRR1VEb1VHT0FZbDBsSFJuQXJseFFuVEFOQmdrcWhraUc5dzBCQVFzRkFEQWEKTVJnd0ZnWURWUVFERXc5b1lYSmliM0l0ZEc5clpXNHRZMkV3SGhjTk1qUXdNekl4TURVd05EUTBXaGNOTWpVdwpNekl4TURVd05EUTBXakFhTVJnd0ZnWURWUVFERXc5b1lYSmliM0l0ZEc5clpXNHRZMkV3Z2dFaU1BMEdDU3FHClNJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURwN0w5NDVCQmMrbGk4UUhSbVpCaDRZbzVXWUpVSjJkTXMKd0k0V2RvSGFITklseWNOUzEweDlEWjl3QWZEcExtalB5d0lEZUxMZkZFNWpVTHFPTWZjTXgzdG9aS2NpL1BvSQpuMU9FQ0g5RDNBZVh0ZDhZY0grVGpaekgvM1ptSXpRUnlieEE3aERtUVNhNHB4cFV2SlNNRVhXYTNiU1o5MEdKClNLNkZtbWozUXBOM1JSZzVQTU1PZEs4dmdqQWMzVUc0akdvU01tS0lqd3dLOFhjR3NCTlJ4SlJpbzBldHhQOXAKeFNEQVd4NlBxMktEQ29yV2FGOWFrTGV5aGYvSWlGSUJXWDJHNDZlRDY4MUprM0NyRDRlZjlzM2VKdzdPRTIyRAp0WWx4NSt6eXpyYmdpK1NvY3MyR0ZJcm04cm5PUlhQMnJlMFlpTVNzaDRjYzhVamZSV0NqQWdNQkFBR2pZVEJmCk1BNEdBMVVkRHdFQi93UUVBd0lDcERBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXcKRHdZRFZSMFRBUUgvQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVTVJ3WUNOMmxRa2JiOXM4U2hPb3VGNzJoeDlJdwpEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBRXY0VUxnb1c2elFWT3Y2cXJidDY4eTlWRnM0V2c5WWRNREZsSkI1CnNmK0V3MDYvekhyR042VnR2RDBsUUhXOVhPZllQeWtVRVd5dmJVMXVHNVdiOE1EcGp1WkhHQzdXZHdEMTRqZU8KK0E4bUpaRWl4VWY0VFZ6UituR1J1M2tFK3VUNXJiT3pSSEdWay9xRXZoV1dpVnd0dDZieVV5UjlDb2RBMU9oTApIRUhiZkR0bVE5MGVqNzBvdFdHUndMQm9UaDJjSG1QRWR4NmVLbTFxTzByM2hrSU1MaTJVbXkyb2FsaC92bG9SCmsvUDMvRU9Ya29NeGhiTGxsRWlkQW1YOURKT3A4KytaYkE4UGw0L3Y5cW9wYmdsYnJzT3dDRmdJWXRzbm5zcW4KWmNDUEVyNWtxakxINm9IWmdvdkRpdnMzVm12V1l4MlZsSDhTcDdxSW1DaTIyS2s9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
  HARBOR_ADMIN_PASSWORD: "YWRtaW5AcHJpbWUxMjM0"
  POSTGRESQL_PASSWORD: "Y2hhbmdlaXQ="
  REGISTRY_CREDENTIAL_PASSWORD: "aGFyYm9yX3JlZ2lzdHJ5X3Bhc3N3b3Jk"
  CSRF_KEY: "TE1LMllIeXdmV0JwSTRBOXFWamptQmVnZWNEQkVKTmQ="
---
# Source: harbor/templates/database/database-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "kc-harbor-database"
  labels:
    heritage: Helm
    release: kc-harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  POSTGRES_PASSWORD: "Y2hhbmdlaXQ="
---
# Source: harbor/templates/jobservice/jobservice-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "kc-harbor-jobservice"
  labels:
    heritage: Helm
    release: kc-harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  JOBSERVICE_SECRET: "S2hERXhFTjVLSDd5WmNXMw=="
  REGISTRY_CREDENTIAL_PASSWORD: "aGFyYm9yX3JlZ2lzdHJ5X3Bhc3N3b3Jk"
---
# Source: harbor/templates/registry/registry-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "kc-harbor-registry"
  labels:
    heritage: Helm
    release: kc-harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  REGISTRY_HTTP_SECRET: "aFBGUFZLZ2psTHFwV0lMSA=="
  REGISTRY_REDIS_PASSWORD: ""
---
# Source: harbor/templates/registry/registry-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "kc-harbor-registry-htpasswd"
  labels:
    heritage: Helm
    release: kc-harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  REGISTRY_HTPASSWD: "aGFyYm9yX3JlZ2lzdHJ5X3VzZXI6JDJhJDEwJDdRM3k0bnMxWjVNL08xaE9WN0kza3V1emh3S2wzUVpJcFYvV0dhZ3BwYjBUemM3SXlUcXZ1"
---
# Source: harbor/templates/registry/registryctl-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "kc-harbor-registryctl"
  labels:
    heritage: Helm
    release: kc-harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
---
# Source: harbor/templates/trivy/trivy-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: kc-harbor-trivy
  labels:
    heritage: Helm
    release: kc-harbor
    chart: harbor
    app: "harbor"
type: Opaque
data:
  redisURL: cmVkaXM6Ly9rYy1oYXJib3ItcmVkaXM6NjM3OS81P2lkbGVfdGltZW91dF9zZWNvbmRzPTMw
  gitHubToken: ""
---
# Source: harbor/templates/core/core-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: kc-harbor-core
  labels:
    heritage: Helm
    release: kc-harbor
    chart: harbor
    app: "harbor"
data:
  app.conf: |+
    appname = Harbor
    runmode = prod
    enablegzip = true

    [prod]
    httpport = 8080
  PORT: "8080"
  DATABASE_TYPE: "postgresql"
  POSTGRESQL_HOST: "kc-harbor-database"
  POSTGRESQL_PORT: "5432"
  POSTGRESQL_USERNAME: "postgres"
  POSTGRESQL_DATABASE: "registry"
  POSTGRESQL_SSLMODE: "disable"
  POSTGRESQL_MAX_IDLE_CONNS: "100"
  POSTGRESQL_MAX_OPEN_CONNS: "900"
  EXT_ENDPOINT: "https://harbor.primebank-poc.klovercloud.io"
  CORE_URL: "http://kc-harbor-core:80"
  JOBSERVICE_URL: "http://kc-harbor-jobservice"
  REGISTRY_URL: "http://kc-harbor-registry:5000"
  TOKEN_SERVICE_URL: "http://kc-harbor-core:80/service/token"
  CORE_LOCAL_URL: "http://127.0.0.1:8080"
  WITH_TRIVY: "true"
  TRIVY_ADAPTER_URL: "http://kc-harbor-trivy:8080"
  REGISTRY_STORAGE_PROVIDER_NAME: "filesystem"
  LOG_LEVEL: "info"
  CONFIG_PATH: "/etc/core/app.conf"
  CHART_CACHE_DRIVER: "redis"
  _REDIS_URL_CORE: "redis://kc-harbor-redis:6379/0?idle_timeout_seconds=30"
  _REDIS_URL_REG: "redis://kc-harbor-redis:6379/2?idle_timeout_seconds=30"  
  PORTAL_URL: "http://kc-harbor-portal"
  REGISTRY_CONTROLLER_URL: "http://kc-harbor-registry:8080"
  REGISTRY_CREDENTIAL_USERNAME: "harbor_registry_user"
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  NO_PROXY: "kc-harbor-core,kc-harbor-jobservice,kc-harbor-database,kc-harbor-registry,kc-harbor-portal,kc-harbor-trivy,kc-harbor-exporter,127.0.0.1,localhost,.local,.internal"
  PERMITTED_REGISTRY_TYPES_FOR_PROXY_CACHE: "docker-hub,harbor,azure-acr,aws-ecr,google-gcr,quay,docker-registry,github-ghcr,jfrog-artifactory"
  CACHE_ENABLED: "true"
  CACHE_EXPIRE_HOURS: "24"
  QUOTA_UPDATE_PROVIDER: "db"
---
# Source: harbor/templates/jobservice/jobservice-cm-env.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "kc-harbor-jobservice-env"
  labels:
    heritage: Helm
    release: kc-harbor
    chart: harbor
    app: "harbor"
data:
  CORE_URL: "http://kc-harbor-core:80"
  TOKEN_SERVICE_URL: "http://kc-harbor-core:80/service/token"
  REGISTRY_URL: "http://kc-harbor-registry:5000"
  REGISTRY_CONTROLLER_URL: "http://kc-harbor-registry:8080"
  REGISTRY_CREDENTIAL_USERNAME: "harbor_registry_user"

  JOBSERVICE_WEBHOOK_JOB_MAX_RETRY: "3"
  JOBSERVICE_WEBHOOK_JOB_HTTP_CLIENT_TIMEOUT: "3"
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  NO_PROXY: "kc-harbor-core,kc-harbor-jobservice,kc-harbor-database,kc-harbor-registry,kc-harbor-portal,kc-harbor-trivy,kc-harbor-exporter,127.0.0.1,localhost,.local,.internal"
  _REDIS_URL_CORE: "redis://kc-harbor-redis:6379/0?idle_timeout_seconds=30"
  CACHE_ENABLED: "true"
  CACHE_EXPIRE_HOURS: "24"
---
# Source: harbor/templates/jobservice/jobservice-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "kc-harbor-jobservice"
  labels:
    heritage: Helm
    release: kc-harbor
    chart: harbor
    app: "harbor"
data:
  config.yml: |+
    #Server listening port
    protocol: "http"
    port: 8080
    worker_pool:
      workers: 10
      backend: "redis"
      redis_pool:
        redis_url: "redis://kc-harbor-redis:6379/1"
        namespace: "harbor_job_service_namespace"
        idle_timeout_second: 3600
    job_loggers:
      - name: "FILE"
        level: INFO
        settings: # Customized settings of logger
          base_dir: "/var/log/jobs"
        sweeper:
          duration: 14 #days
          settings: # Customized settings of sweeper
            work_dir: "/var/log/jobs"
    metric:
      enabled: false
      path: /metrics
      port: 8001
    #Loggers for the job service
    loggers:
      - name: "STD_OUTPUT"
        level: INFO
    reaper:
      # the max time to wait for a task to finish, if unfinished after max_update_hours, the task will be mark as error, but the task will continue to run, default value is 24
      max_update_hours: 24
      # the max time for execution in running state without new task created
      max_dangling_hours: 168
---
# Source: harbor/templates/portal/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "kc-harbor-portal"
  labels:
    heritage: Helm
    release: kc-harbor
    chart: harbor
    app: "harbor"
data:
  nginx.conf: |+
    worker_processes auto;
    pid /tmp/nginx.pid;
    events {
        worker_connections  1024;
    }
    http {
        client_body_temp_path /tmp/client_body_temp;
        proxy_temp_path /tmp/proxy_temp;
        fastcgi_temp_path /tmp/fastcgi_temp;
        uwsgi_temp_path /tmp/uwsgi_temp;
        scgi_temp_path /tmp/scgi_temp;
        server {
            listen 8080;
            listen [::]:8080;
            server_name  localhost;
            root   /usr/share/nginx/html;
            index  index.html index.htm;
            include /etc/nginx/mime.types;
            gzip on;
            gzip_min_length 1000;
            gzip_proxied expired no-cache no-store private auth;
            gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;
            location /devcenter-api-2.0 {
                try_files $uri $uri/ /swagger-ui-index.html;
            }
            location / {
                try_files $uri $uri/ /index.html;
            }
            location = /index.html {
                add_header Cache-Control "no-store, no-cache, must-revalidate";
            }
        }
    }
---
# Source: harbor/templates/registry/registry-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "kc-harbor-registry"
  labels:
    heritage: Helm
    release: kc-harbor
    chart: harbor
    app: "harbor"
data:
  config.yml: |+
    version: 0.1
    log:
      level: info
      fields:
        service: registry
    storage:
      filesystem:
        rootdirectory: /storage
      cache:
        layerinfo: redis
      maintenance:
        uploadpurging:
          enabled: true
          age: 168h
          interval: 24h
          dryrun: false
      delete:
        enabled: true
      redirect:
        disable: false
    redis:
      addr: kc-harbor-redis:6379
      db: 2
      readtimeout: 10s
      writetimeout: 10s
      dialtimeout: 10s
      pool:
        maxidle: 100
        maxactive: 500
        idletimeout: 60s
    http:
      addr: :5000
      relativeurls: false
      # set via environment variable
      # secret: placeholder
      debug:
        addr: localhost:5001
    auth:
      htpasswd:
        realm: harbor-registry-basic-realm
        path: /etc/registry/passwd
    validation:
      disabled: true
    compatibility:
      schema1:
        enabled: true
  ctl-config.yml: |+
    ---
    protocol: "http"
    port: 8080
    log_level: info
    registry_config: "/etc/registry/config.yml"
---
# Source: harbor/templates/registry/registryctl-cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "kc-harbor-registryctl"
  labels:
    heritage: Helm
    release: kc-harbor
    chart: harbor
    app: "harbor"
data:
---
# Source: harbor/templates/jobservice/jobservice-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: kc-harbor-jobservice
  annotations:
    helm.sh/resource-policy: keep
  labels:
    heritage: Helm
    release: kc-harbor
    chart: harbor
    app: "harbor"
    component: jobservice
spec:
  accessModes: 
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
  storageClassName: local-path
---
# Source: harbor/templates/registry/registry-pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: kc-harbor-registry
  annotations:
    helm.sh/resource-policy: keep
  labels:
    heritage: Helm
    release: kc-harbor
    chart: harbor
    app: "harbor"
    component: registry
spec:
  accessModes: 
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: local-path
---
# Source: harbor/templates/core/core-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: kc-harbor-core
  labels:
    heritage: Helm
    release: kc-harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: http-web
      port: 80
      targetPort: 8080
  selector:
    release: kc-harbor
    app: "harbor"
    component: core
---
# Source: harbor/templates/database/database-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "kc-harbor-database"
  labels:
    heritage: Helm
    release: kc-harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 5432
  selector:
    release: kc-harbor
    app: "harbor"
    component: database
---
# Source: harbor/templates/jobservice/jobservice-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "kc-harbor-jobservice"
  labels:
    heritage: Helm
    release: kc-harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: http-jobservice
      port: 80
      targetPort: 8080
  selector:
    release: kc-harbor
    app: "harbor"
    component: jobservice
---
# Source: harbor/templates/portal/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "kc-harbor-portal"
  labels:
    heritage: Helm
    release: kc-harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    release: kc-harbor
    app: "harbor"
    component: portal
---
# Source: harbor/templates/redis/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: kc-harbor-redis
  labels:
    heritage: Helm
    release: kc-harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - port: 6379
  selector:
    release: kc-harbor
    app: "harbor"
    component: redis
---
# Source: harbor/templates/registry/registry-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "kc-harbor-registry"
  labels:
    heritage: Helm
    release: kc-harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: http-registry
      port: 5000

    - name: http-controller
      port: 8080
  selector:
    release: kc-harbor
    app: "harbor"
    component: registry
---
# Source: harbor/templates/trivy/trivy-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: "kc-harbor-trivy"
  labels:
    heritage: Helm
    release: kc-harbor
    chart: harbor
    app: "harbor"
spec:
  ports:
    - name: http-trivy
      protocol: TCP
      port: 8080
  selector:
    release: kc-harbor
    app: "harbor"
    component: trivy
---
# Source: harbor/templates/core/core-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kc-harbor-core
  labels:
    heritage: Helm
    release: kc-harbor
    chart: harbor
    app: "harbor"
    component: core
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      release: kc-harbor
      app: "harbor"
      component: core
  template:
    metadata:
      labels:
        release: kc-harbor
        app: "harbor"
        component: core
      annotations:
        checksum/configmap: 686e365dbb5ac7667704d3d979e19b56cb22fdac2331ec2db17b4beaed1e6558
        checksum/secret: 9edec5bd80b70ca71fc14250b3d7650fe47319d78aecad4cc5af81e3c024dac4
        checksum/secret-jobservice: cccc7c1f26d6c8d1abe82cbb3710cbc58534023d0345914e986f416beed6b689
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      containers:
      - name: core
        image: goharbor/harbor-core:dev
        imagePullPolicy: IfNotPresent
        startupProbe:
          httpGet:
            path: /api/v2.0/ping
            scheme: HTTP
            port: 8080
          failureThreshold: 360
          initialDelaySeconds: 10
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /api/v2.0/ping
            scheme: HTTP
            port: 8080
          failureThreshold: 2
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/v2.0/ping
            scheme: HTTP
            port: 8080
          failureThreshold: 2
          periodSeconds: 10
        envFrom:
        - configMapRef:
            name: "kc-harbor-core"
        - secretRef:
            name: "kc-harbor-core"
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: kc-harbor-core
                key: secret
          - name: JOBSERVICE_SECRET
            valueFrom:
              secretKeyRef:
                name: kc-harbor-jobservice
                key: JOBSERVICE_SECRET
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: config
          mountPath: /etc/core/app.conf
          subPath: app.conf
        - name: secret-key
          mountPath: /etc/core/key
          subPath: key
        - name: token-service-private-key
          mountPath: /etc/core/private_key.pem
          subPath: tls.key
        - name: ca-download
          mountPath: /etc/core/ca
        - name: psc
          mountPath: /etc/core/token
        resources:
          limits:
            cpu: 200m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 256Mi
      volumes:
      - name: config
        configMap:
          name: kc-harbor-core
          items:
            - key: app.conf
              path: app.conf
      - name: secret-key
        secret:
          secretName: kc-harbor-core
          items:
            - key: secretKey
              path: key
      - name: token-service-private-key
        secret:
          secretName: kc-harbor-core
      - name: ca-download
        secret:
      - name: psc
        emptyDir: {}
---
# Source: harbor/templates/jobservice/jobservice-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "kc-harbor-jobservice"
  labels:
    heritage: Helm
    release: kc-harbor
    chart: harbor
    app: "harbor"
    component: jobservice
spec:
  replicas: 1
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      release: kc-harbor
      app: "harbor"
      component: jobservice
  template:
    metadata:
      labels:
        heritage: Helm
        release: kc-harbor
        chart: harbor
        app: "harbor"
        component: jobservice
      annotations:
        checksum/configmap: 18b45bf6338443ce648e8aef053bea879a6b588751921e7b23047eb150750478
        checksum/configmap-env: f0c23b2d5f5ac4ece7046ac0fbdd998817b11bbef45fc8f4ce6e35f587212abf
        checksum/secret: 92306aa72f3819c31fc876d0f67e435c98ad8df623eb0f2785742128c6bbd21b
        checksum/secret-core: be4784fd5bcecc9601aaf7372dd8ca62a28b764a2e0d80b9d1bb7645892d82d1
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      containers:
      - name: jobservice
        image: goharbor/harbor-jobservice:dev
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/v1/stats
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/v1/stats
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 20
          periodSeconds: 10
        resources:
          limits:
            cpu: 200m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 256Mi
        env:
          - name: CORE_SECRET
            valueFrom:
              secretKeyRef:
                name: kc-harbor-core
                key: secret
        envFrom:
        - configMapRef:
            name: "kc-harbor-jobservice-env"
        - secretRef:
            name: "kc-harbor-jobservice"
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: jobservice-config
          mountPath: /etc/jobservice/config.yml
          subPath: config.yml
        - name: job-logs
          mountPath: /var/log/jobs
          subPath: 
      volumes:
      - name: jobservice-config
        configMap:
          name: "kc-harbor-jobservice"
      - name: job-logs
        persistentVolumeClaim:
          claimName: kc-harbor-jobservice
---
# Source: harbor/templates/portal/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "kc-harbor-portal"
  labels:
    heritage: Helm
    release: kc-harbor
    chart: harbor
    app: "harbor"
    component: portal
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      release: kc-harbor
      app: "harbor"
      component: portal
  template:
    metadata:
      labels:
        release: kc-harbor
        app: "harbor"
        component: portal
      annotations:
        checksum/configmap: 50e301bf85dc646aeb895af4ab3f38479f265fde0da96618aa17d32288c25945
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      containers:
      - name: portal
        image: goharbor/harbor-portal:dev
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            cpu: 200m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 256Mi
        livenessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: portal-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
      volumes:
      - name: portal-config
        configMap:
          name: "kc-harbor-portal"
---
# Source: harbor/templates/registry/registry-dpl.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "kc-harbor-registry"
  labels:
    heritage: Helm
    release: kc-harbor
    chart: harbor
    app: "harbor"
    component: registry
spec:
  replicas: 1
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      release: kc-harbor
      app: "harbor"
      component: registry
  template:
    metadata:
      labels:
        heritage: Helm
        release: kc-harbor
        chart: harbor
        app: "harbor"
        component: registry
      annotations:
        checksum/configmap: 177b313e783a59ef3a9fd0af12a6fbda916a4957a1ab94abfeaed55ec61490b1
        checksum/secret: a0fccd48f29343c43c202573d9fa9749ab41192bd3db08694527914af9dbe6e2
        checksum/secret-jobservice: 4ed21cdb004e3148f51c15c70c6293f2ed4042edd1719b78d966f8a80b48d21f
        checksum/secret-core: 48f8d859d6d8cf1561ab354da4e0db684af3a1a5d2148c0c7412ed677dc369f6
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
        fsGroupChangePolicy: OnRootMismatch
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      containers:
      - name: registry
        image: goharbor/registry-photon:dev
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 5000
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            scheme: HTTP
            port: 5000
          initialDelaySeconds: 1
          periodSeconds: 10
        resources:
          limits:
            cpu: 500m
            memory: 2Gi
          requests:
            cpu: 100m
            memory: 2Gi
        args: ["serve", "/etc/registry/config.yml"]
        envFrom:
        - secretRef:
            name: "kc-harbor-registry"
        env:
        ports:
        - containerPort: 5000
        - containerPort: 5001
        volumeMounts:
        - name: registry-data
          mountPath: /storage
          subPath: 
        - name: registry-htpasswd
          mountPath: /etc/registry/passwd
          subPath: passwd
        - name: registry-config
          mountPath: /etc/registry/config.yml
          subPath: config.yml
      - name: registryctl
        image: goharbor/harbor-registryctl:dev
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /api/health
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            scheme: HTTP
            port: 8080
          initialDelaySeconds: 1
          periodSeconds: 10
        envFrom:
        - configMapRef:
            name: "kc-harbor-registryctl"
        - secretRef:
            name: "kc-harbor-registry"
        - secretRef:
            name: "kc-harbor-registryctl"
        env:
        - name: CORE_SECRET
          valueFrom:
            secretKeyRef:
              name: kc-harbor-core
              key: secret
        - name: JOBSERVICE_SECRET
          valueFrom:
            secretKeyRef:
              name: kc-harbor-jobservice
              key: JOBSERVICE_SECRET
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: registry-data
          mountPath: /storage
          subPath: 
        - name: registry-config
          mountPath: /etc/registry/config.yml
          subPath: config.yml
        - name: registry-config
          mountPath: /etc/registryctl/config.yml
          subPath: ctl-config.yml
      volumes:
      - name: registry-htpasswd
        secret:
          secretName: kc-harbor-registry-htpasswd
          
          items:
            - key: REGISTRY_HTPASSWD
              path: passwd
      - name: registry-config
        configMap:
          name: "kc-harbor-registry"
      - name: registry-data
        persistentVolumeClaim:
          claimName: kc-harbor-registry
---
# Source: harbor/templates/database/database-ss.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "kc-harbor-database"
  labels:
    heritage: Helm
    release: kc-harbor
    chart: harbor
    app: "harbor"
    component: database
spec:
  replicas: 1
  serviceName: "kc-harbor-database"
  selector:
    matchLabels:
      release: kc-harbor
      app: "harbor"
      component: database
  template:
    metadata:
      labels:
        heritage: Helm
        release: kc-harbor
        chart: harbor
        app: "harbor"
        component: database
      annotations:
        checksum/secret: de94a809374ee1eaae941d46e435bd561351a4739c1b3d9cf977a6f1c64a1778
    spec:
      securityContext:
        runAsUser: 999
        fsGroup: 999
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      initContainers:
      # as we change the data directory to a sub folder to support psp, the init container here
      # is used to migrate the existing data. See https://github.com/goharbor/harbor-helm/issues/756
      # for more detail.
      # we may remove it after several releases
      - name: "data-migrator"
        image: goharbor/harbor-db:dev
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh"]
        args: ["-c", "[ -e /var/lib/postgresql/data/postgresql.conf ] && [ ! -d /var/lib/postgresql/data/pgdata ] && mkdir -m 0700 /var/lib/postgresql/data/pgdata && mv /var/lib/postgresql/data/* /var/lib/postgresql/data/pgdata/ || true"]
        volumeMounts:
          - name: database-data
            mountPath: /var/lib/postgresql/data
            subPath: 
      # with "fsGroup" set, each time a volume is mounted, Kubernetes must recursively chown() and chmod() all the files and directories inside the volume
      # this causes the postgresql reports the "data directory /var/lib/postgresql/data/pgdata has group or world access" issue when using some CSIs e.g. Ceph
      # use this init container to correct the permission
      # as "fsGroup" applied before the init container running, the container has enough permission to execute the command
      - name: "data-permissions-ensurer"
        image: goharbor/harbor-db:dev
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh"]
        args: ["-c", "chmod -R 700 /var/lib/postgresql/data/pgdata || true"]
        volumeMounts:
          - name: database-data
            mountPath: /var/lib/postgresql/data
            subPath: 
      containers:
      - name: database
        image: goharbor/harbor-db:dev
        imagePullPolicy: IfNotPresent
        livenessProbe:
          exec:
            command:
            - /docker-healthcheck.sh
          initialDelaySeconds: 300
          periodSeconds: 10
          timeoutSeconds: 1
        readinessProbe:
          exec:
            command:
            - /docker-healthcheck.sh
          initialDelaySeconds: 1
          periodSeconds: 10
          timeoutSeconds: 1
        resources:
          limits:
            cpu: "1"
            memory: 1Gi
          requests:
            cpu: "1"
            memory: 1Gi
        envFrom:
          - secretRef:
              name: "kc-harbor-database"
        env:
          # put the data into a sub directory to avoid the permission issue in k8s with restricted psp enabled
          # more detail refer to https://github.com/goharbor/harbor-helm/issues/756
          - name: PGDATA
            value: "/var/lib/postgresql/data/pgdata"
        volumeMounts:
        - name: database-data
          mountPath: /var/lib/postgresql/data
          subPath: 
        - name: shm-volume
          mountPath: /dev/shm
      volumes:
      - name: shm-volume
        emptyDir:
          medium: Memory
          sizeLimit: 512Mi
  volumeClaimTemplates:
  - metadata:
      name: "database-data"
      labels:
        heritage: Helm
        release: kc-harbor
        chart: harbor
        app: "harbor"
      annotations:
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "local-path"
      resources:
        requests:
          storage: "10Gi"
---
# Source: harbor/templates/redis/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kc-harbor-redis
  labels:
    heritage: Helm
    release: kc-harbor
    chart: harbor
    app: "harbor"
    component: redis
spec:
  replicas: 1
  serviceName: kc-harbor-redis
  selector:
    matchLabels:
      release: kc-harbor
      app: "harbor"
      component: redis
  template:
    metadata:
      labels:
        heritage: Helm
        release: kc-harbor
        chart: harbor
        app: "harbor"
        component: redis
    spec:
      securityContext:
        runAsUser: 999
        fsGroup: 999
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      containers:
      - name: redis
        image: goharbor/redis-photon:dev
        imagePullPolicy: IfNotPresent
        livenessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 300
          periodSeconds: 10
        readinessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 1
          periodSeconds: 10
        resources:
          limits:
            cpu: 200m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 256Mi
        volumeMounts:
        - name: data
          mountPath: /var/lib/redis
          subPath: 
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        heritage: Helm
        release: kc-harbor
        chart: harbor
        app: "harbor"
      annotations:
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "local-path"
      resources:
        requests:
          storage: "5Gi"
---
# Source: harbor/templates/trivy/trivy-sts.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kc-harbor-trivy
  labels:
    heritage: Helm
    release: kc-harbor
    chart: harbor
    app: "harbor"
    component: trivy
spec:
  replicas: 1
  serviceName: kc-harbor-trivy
  selector:
    matchLabels:
      release: kc-harbor
      app: "harbor"
      component: trivy
  template:
    metadata:
      labels:
        heritage: Helm
        release: kc-harbor
        chart: harbor
        app: "harbor"
        component: trivy
      annotations:
        checksum/secret: 8d74e25ac7df15b4666e465adfce292392411f7c642ebeb3aacd535f50147dab
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      containers:
        - name: trivy
          image: goharbor/trivy-adapter-photon:dev
          imagePullPolicy: IfNotPresent
          securityContext:
            privileged: false
            allowPrivilegeEscalation: false
          env:
            - name: HTTP_PROXY
              value: ""
            - name: HTTPS_PROXY
              value: ""
            - name: NO_PROXY
              value: "kc-harbor-core,kc-harbor-jobservice,kc-harbor-database,kc-harbor-registry,kc-harbor-portal,kc-harbor-trivy,kc-harbor-exporter,127.0.0.1,localhost,.local,.internal"
            - name: "SCANNER_LOG_LEVEL"
              value: "info"
            - name: "SCANNER_TRIVY_CACHE_DIR"
              value: "/home/scanner/.cache/trivy"
            - name: "SCANNER_TRIVY_REPORTS_DIR"
              value: "/home/scanner/.cache/reports"
            - name: "SCANNER_TRIVY_DEBUG_MODE"
              value: "false"
            - name: "SCANNER_TRIVY_VULN_TYPE"
              value: "os,library"
            - name: "SCANNER_TRIVY_TIMEOUT"
              value: "5m0s"
            - name: "SCANNER_TRIVY_GITHUB_TOKEN"
              valueFrom:
                secretKeyRef:
                  name: kc-harbor-trivy
                  key: gitHubToken
            - name: "SCANNER_TRIVY_SEVERITY"
              value: "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"
            - name: "SCANNER_TRIVY_IGNORE_UNFIXED"
              value: "false"
            - name: "SCANNER_TRIVY_SKIP_UPDATE"
              value: "false"
            - name: "SCANNER_TRIVY_OFFLINE_SCAN"
              value: "false"
            - name: "SCANNER_TRIVY_SECURITY_CHECKS"
              value: "vuln"
            - name: "SCANNER_TRIVY_INSECURE"
              value: "false"
            - name: SCANNER_API_SERVER_ADDR
              value: ":8080"
            - name: "SCANNER_REDIS_URL"
              valueFrom:
                secretKeyRef:
                  name: kc-harbor-trivy
                  key: redisURL
            - name: "SCANNER_STORE_REDIS_URL"
              valueFrom:
                secretKeyRef:
                  name: kc-harbor-trivy
                  key: redisURL
            - name: "SCANNER_JOB_QUEUE_REDIS_URL"
              valueFrom:
                secretKeyRef:
                  name: kc-harbor-trivy
                  key: redisURL
          ports:
            - name: api-server
              containerPort: 8080
          volumeMounts:
          - name: data
            mountPath: /home/scanner/.cache
            subPath: 
            readOnly: false
          livenessProbe:
            httpGet:
              scheme: HTTP
              path: /probe/healthy
              port: api-server
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 10
          readinessProbe:
            httpGet:
              scheme: HTTP
              path: /probe/ready
              port: api-server
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          resources:
            limits:
              cpu: 1
              memory: 1Gi
            requests:
              cpu: 200m
              memory: 512Mi
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        heritage: Helm
        release: kc-harbor
        chart: harbor
        app: "harbor"
      annotations:
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "local-path"
      resources:
        requests:
          storage: "5Gi"
---
# Source: harbor/templates/ingress/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: "kc-harbor-ingress"
  labels:
    heritage: Helm
    release: kc-harbor
    chart: harbor
    app: "harbor"
  annotations:
    ingress.kubernetes.io/proxy-body-size: "0"
    ingress.kubernetes.io/ssl-redirect: "true"
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  tls:
  - secretName: wild-cert-secret
    hosts:
    - harbor.primebank-poc.klovercloud.io
  rules:
  - http:
      paths:
      - path: /api/
        pathType: Prefix
        backend:
          service:
            name: kc-harbor-core
            port:
              number: 80
      - path: /service/
        pathType: Prefix
        backend:
          service:
            name: kc-harbor-core
            port:
              number: 80
      - path: /v2/
        pathType: Prefix
        backend:
          service:
            name: kc-harbor-core
            port:
              number: 80
      - path: /chartrepo/
        pathType: Prefix
        backend:
          service:
            name: kc-harbor-core
            port:
              number: 80
      - path: /c/
        pathType: Prefix
        backend:
          service:
            name: kc-harbor-core
            port:
              number: 80
      - path: /
        pathType: Prefix
        backend:
          service:
            name: kc-harbor-portal
            port:
              number: 80
    host: harbor.primebank-poc.klovercloud.io
